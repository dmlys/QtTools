#pragma once
#include <memory>
#include <utility>

#include <QtCore/QString>
#include <QtGui/QTextOption>
#include <QtGui/QTextLayout>
#include <QtWidgets/QWidget>
#include <QtWidgets/QFrame>

namespace QtTools
{
	/// Simple plain labal widget. It's similar to QLabel,
	/// but support only plain text, no html, no pixmap, no picture, no editing, no selecting, etc.
	/// On the other hand it allows text eliding, if not fitted. And overral more simple implementation.
	class PlainLabel : public QFrame
	{
		Q_OBJECT;

		Q_PROPERTY(QString text READ text WRITE setText RESET clear)
		Q_PROPERTY(Qt::Alignment alignment READ alignment WRITE setAlignment)
		Q_PROPERTY(bool wordWrap READ wordWrap WRITE setWordWrap)
		Q_PROPERTY(int margin READ margin WRITE setMargin)
		Q_PROPERTY(int indent READ indent WRITE setIndent)
		Q_PROPERTY(int lineLimit READ lineLimit WRITE setLineLimit)
		Q_PROPERTY(bool strictLineLimit READ strictLineLimit WRITE setStrictLineLimit)

	protected:
		QString m_text;                              // displayed text
		Qt::Alignment m_alignment = Qt::AlignLeft;   // text alignment
		bool m_word_wrap = false;                    // should text be word wraped, if turned on, than this widget also have heightForWidth mechanic turned on
		bool m_strict_line_limit = false;            // does line limit applies only on size hints or on paint events to
		int m_margin = 0;                            // margin between frame and text
		int m_indent = -1;                           // ident between text and frame - see QLabel description for more info
		int m_line_limit = -1;                       // there should not be more than given lines of text. If not feeted - text would be elided.
		                                             // By default influences only size hint, if strict mode is turned on - than applies on paint too.
		                                             // 0 and negatives - line limit disabled

		// cached size hint
		mutable QSize m_cached_size_hint;
		//mutable QSize m_cached_minumum_size_hint;

	protected:
		/// Calculates text direction - checks m_text.isRightToLeft
		virtual Qt::LayoutDirection TextDirection() const;
		/// Prepares text option to be used by QTextLayout.
		virtual QTextOption PrepareTextOption() const;
		/// Lays outs m_text into given rect with given line limit, elides text in process if needed:
		/// QTextLayout should already contain elided text, so it can be immidiatly drawn with QPainter.
		/// Rectangle should be valid -> not empty -> actually width and height should be adequate.
		/// This method does not account ident and margin.
		virtual auto LayoutText(const QRect & rect, int line_limit) const -> std::unique_ptr<QTextLayout>;
		/// Calculates bounding for given text layout,
		/// For each line from layout: accrect |= line.naturalTextRect
		virtual QRect NaturalBoundingRect(QTextLayout & layout) const;

		/// Prepares painter for drawing label text: sets font, text color, etc
		virtual void PreparePainter(QPainter * painter) const;
		/// Draws label:
		/// * layouts text into contentsRect - margin - ident
		/// * draw layout into painter
		/// This method does not anything else, for example drawing frame from QFrame,
		/// it also does not prepares painter, that should be done by caller size
		virtual void DrawLabel(QPainter * painter) const;

		/// Called on any notable changes of label, calls QWidget::update, QWidget::updateGeometry
		virtual void UpdateLabel();

	protected:
		/// initializes label, called from constructor, sets widget size policy
		void init();
		/// Calculates ident - see QLabel description
		int GetIdent(const QFontMetrics & fm) const;

	public:
		virtual void paintEvent(QPaintEvent * event) override;

	public:
		/// Calculates label size for given width, also adds ident and margin for returned result.
		/// if width < 0 - tries to find sensible width based on current label text
		virtual QSize sizeForWidth(int width) const;
		virtual int heightForWidth(int width) const override;

		/// calculates label sizeHint - effictivelly calls sizeForWidth(-1)
		virtual QSize sizeHint() const override;
		//virtual QSize minimumSizeHint() const override;

	public:
		/// sets label text
		QString text() const { return m_text; }
		Q_SLOT void setText(QString text);
		Q_SLOT void setNum(int num);
	    Q_SLOT void setNum(double num);

		/// clears ony label text
		Q_SLOT void clear();

		Qt::Alignment alignment() const { return m_alignment; }
		void setAlignment(Qt::Alignment alignment);

		bool wordWrap() const { return m_word_wrap; }
		void setWordWrap(bool wrap);

		int  margin() const { return m_margin; }
		void setMargin(int margin);

		int  indent() const { return m_indent; }
		void setIndent(int ident);

		int  lineLimit() const { return m_line_limit; }
		void setLineLimit(int line_limit);

		bool strictLineLimit() const { return m_strict_line_limit; }
		void setStrictLineLimit(bool strict_line_limit);

	public:
		Q_DISABLE_COPY(PlainLabel);
		~PlainLabel() = default;

		explicit PlainLabel(QWidget * parent = nullptr, Qt::WindowFlags flags = Qt::WindowFlags());
		explicit PlainLabel(const QString & text, QWidget * parent = nullptr, Qt::WindowFlags flags = Qt::WindowFlags());
	};
}
