#pragma once
#include <list>
#include <mutex>
#include <atomic>
#include <functional>

#include <QtCore/QObject>

namespace QtTools
{
	/// Simple helper class, represents queue associated with a thread gui loop.
	/// You can place some function and it will be executed from that thread.
	/// Internally it uses Qt::QueuedConnection mechanizm, and this class - sort of a wrapper.
	/// 
	/// Thread from which actions are executed - is thread to which belongs this object.
	/// See qt thread association rules and methods, like moveToThread,
	/// by default GuiQueue(QObject) belongs to thread from which is was created.
	class GuiQueue : public QObject
	{
		Q_OBJECT
		
	public:
		typedef std::function<void()> action_type;
		typedef std::list<action_type> action_list;
		
	private:
		std::atomic_bool m_shouldEmit = ATOMIC_VAR_INIT(true);
		std::mutex  m_mutex;
		action_list m_actions;
		
	public:
		/// Adds action/actions to internal queue
		void Add(action_type action);
		void AddAll(action_list actions);

		template <class Range>
		void AddAll(Range && actions);

	private:
		/// Takes all pending actions from internal queue
		auto Take() -> action_list;

	private:
		Q_SLOT   void EmitAccamulatedActions();
		Q_SIGNAL void EmitActionsAvailiable();
		
	public:
		GuiQueue(QObject * parent = nullptr);
		~GuiQueue();
		
		Q_DISABLE_COPY(GuiQueue);
	};

	template <class Range>
	void GuiQueue::AddAll(Range && range)
	{
		action_list actions;
		for (auto && action : range)
			actions.push_back(std::forward<decltype(action)>(action));

		AddAll(std::move(actions));
	}
}
